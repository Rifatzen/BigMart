


CREATE OR REPLACE PROCEDURE UPDATE_TOTAL_PURCHASE(C_ID IN VARCHAR2)
IS

CNTT NUMBER;
FOUND NUMBER;
BEGIN
	
	FOR R IN
	(
		SELECT C.PRODUCT_ID AS PRODUCT_ID, C.QUANTITY AS QUANTITY
		FROM CART C JOIN PRODUCT P
		ON C.PRODUCT_ID = P.PRODUCT_ID
		WHERE C.CART_ID = C_ID
	)
	LOOP
		
		BEGIN
			
			SELECT COUNT(*) INTO CNTT
			FROM TOTAL_PURCHASE;
			
			IF(CNTT > 0) THEN
			
				FOR K IN
				(
					SELECT PRODUCT_ID
					FROM TOTAL_PURCHASE
				)
				
				LOOP 
				  IF(K.PRODUCT_ID = R.PRODUCT_ID) THEN
							FOUND := 1;
					END IF;
				END LOOP;
				
				IF(FOUND = 1) THEN
					UPDATE TOTAL_PURCHASE SET CNT = CNT + R.QUANTITY
					WHERE PRODUCT_ID = R.PRODUCT_ID;
				ELSE
					INSERT INTO TOTAL_PURCHASE VALUES(R.PRODUCT_ID,R.QUANTITY);
				END IF;
				
			ELSE
				INSERT INTO TOTAL_PURCHASE VALUES(R.PRODUCT_ID,R.QUANTITY);
			END IF;
			
		END;
		
	END LOOP;
END;
/

BEGIN
	UPDATE_TOTAL_PURCHASE('1');
END;





CREATE OR REPLACE TRIGGER ORDER_TRIGGER
AFTER INSERT
ON ORDER_TABLE
FOR EACH ROW
DECLARE

O_ID VARCHAR2(100);
P_ID VARCHAR2(100);

BEGIN
	
	O_ID := :NEW.ORDER_ID;
	P_ID := :NEW.PERSON_ID;
	
	UPDATE CART SET CART_ID = O_ID 
	WHERE CART_ID IS NULL
	AND PERSON_ID = P_ID;
	
	

END;
/






CREATE OR REPLACE TRIGGER UPDATE_PRODUCT_TABLE
AFTER UPDATE
ON CART
FOR EACH ROW
DECLARE

QUAN NUMBER;
PRO_ID VARCHAR2(100);

BEGIN

	QUAN := :OLD.QUANTITY;
	PRO_ID := :OLD.PRODUCT_ID;
	
	IF(:NEW.CART_ID IS NOT NULL) THEN
		UPDATE PRODUCT SET QUANTITY = QUANTITY - QUAN, TOTAL_SALES = TOTAL_SALES + QUAN
		WHERE PRODUCT_ID = PRO_ID;
	END IF;
END;
/

--ALTER TRIGGER UPDATE_PRODUCT_TABLE DISABLE;






